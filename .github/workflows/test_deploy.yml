#* workflow(このファイルそのもの) > job(複数のstepで構成) > step(最小単位)
name: Test and Deploy

on:
  pull_request:    # プルリクエスト作成時、プルリクエストへ追加でコミットをプッシュした時
  push:            # mainブランチへのプッシュ、またはプルリクエストのマージ時
    branches:
      - main

# job
jobs:
  # テスト・ジョブ
  test:
    name: Test
    runs-on: ubuntu-latest
    # step
    steps:
      - uses: actions/checkout@v2    # GitHubの仮想マシン環境にコードをチェックアウト(クローン)する

      - uses: ruby/setup-ruby@v1    # Ruby公式のアクション
        with:
          ruby-version: 2.6.8

      - name: Cache bundle    # Gemのキャッシュ
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: bundle-v1-${{ hashFiles('Gemfile.lock') }}

      - uses: actions/setup-node@v2   #node.js
        with:
          node-version: 16

      - name: Run bundle install    # stepの名前。Gemをインストールする。
        run: |
          bundle config --local path vendor/bundle
          bundle config --local without production
          bundle install

      - name: Cache yarn    # node-modulesのキャッシュ
        uses: actions/cache@v2
        with:
          path: node_modules
          key: yarn-v1-${{ hashFiles('yarn.lock') }}

      # アセットのコンパイル
      - run: RAILS_ENV=test bundle exec rails assets:precompile

      # ビルド(Gemのインストール、アセットのコンパイル)が終わったのでテストを実行する
      - run: bundle exec rails test

  # デプロイ・ジョブ
  deploy:
    name: Deploy app to AWS
    needs: test                             # test: を通っていることを必須にする
    if: github.ref == 'refs/heads/main'     # on: pull_request: の時に実行しないようにする
    runs-on: ubuntu-latest

    steps:
      - name: install SSH key
        run : |
          mkdir -p -m 700 ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/rails-deploy-webapp
          chmod 600 ~/.ssh/rails-deploy-webapp

      - name: Deploy
        run: |
          eval $(ssh-agent)
          ssh-add ~/.ssh/rails-deploy-webapp
          ssh -o StrictHostKeyChecking=no -A webapp@${{ secrets.TARGET_HOSTNAME }} "cd rails-deploy &&
          git pull origin main &&
          ~/.rbenv/shims/bundle config --local deployment true &&
          ~/.rbenv/shims/bundle config --local without development:test &&
          ~/.rbenv/shims/bundle install &&
          RAILS_ENV=production ~/.rbenv/shims/bundle exec rails assets:precompile &&
          RAILS_ENV=production ~/.rbenv/shims/bundle exec rails db:migrate &&
          ~/.rbenv/shims/bundle exec pumactl restart"


# actions/cacheの実行タイミングは３つ。①それが記述されたstepで実行, ②後続の全てのstepで実行, ③jobの終了時に実行。
      # ③では、pathに指定したディレクトリもしくはファイルを、keyに指定した名前でキャッシュします。
      # そして、次回ジョブ起動時の①の時、同じkeyのキャッシュがあれば、それを復元してくれます。
      # 今回、keyにおいてhashFiles関数を使うことで、Gemfile.lockのSHA256ハッシュをkeyに含めるようにしています。
      # これにより、前回ジョブ起動時からGemfile.lockに変化が無ければkeyが一致することとなり、キャッシュを利用することになります。
      # なお、keyにv1という文字列を含めている理由を解説します。
      # actions/cacheで一度キャッシュされたファイルは、任意に削除することができません。
      # そのため、Gemfile.lockに変化は無いけれども何らかの事情でキャッシュを使用しないでジョブを実行したい場合に、v1の部分をv2などに書き換えて強制的にkey不一致の状態を作り出せるよう、このようなkeyにしています。


# runには、そのステップで実行するコマンドを記述します。コマンドが複数行にわたる場合は、最初に|と記述し、その次の行からコマンドを記述します。
        # bundle config <name> <value>とすることで、Bundlerの設定を行います。なお、--localオプションを指定することで、設定は.bundle/configに保存されます。
        # path：Gemのインストール先を指定します。ここではvendor/bundleにインストールされるよう指定しています。
        # without：withoutをproductionにすることで、Gemfileのうち、productionのグループのものはインストールされなくなります。今回テストを実行するにあたって必要なGemfileはtestのグループのものであることと、5章で本番環境にデプロイする時に使うCapistranoはdevelopmentグループとするので、このような指定にしています。
